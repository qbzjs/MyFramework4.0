//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MyFramework_ModelContorlBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MyFramework.ModelContorlBase), typeof(System.Object));
		L.RegFunction("Load", Load);
		L.RegFunction("LoadEnd", LoadEnd);
		L.RegFunction("Start", Start);
		L.RegFunction("Close", Close);
		L.RegFunction("GetMyComps", GetMyComps);
		L.RegFunction("StartCoroutine", StartCoroutine);
		L.RegFunction("VP", VP);
		L.RegFunction("CreateObj", CreateObj);
		L.RegFunction("LoadBundle", LoadBundle);
		L.RegFunction("ShowInspector", ShowInspector);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ModelName", get_ModelName, set_ModelName);
		L.RegVar("State", get_State, set_State);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)ToLua.CheckObject<MyFramework.ModelContorlBase>(L, 1);
			object[] arg0 = ToLua.ToParamsObject(L, 2, count - 1);
			obj.Load(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)ToLua.CheckObject<MyFramework.ModelContorlBase>(L, 1);
			bool o = obj.LoadEnd();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)ToLua.CheckObject<MyFramework.ModelContorlBase>(L, 1);
			object[] arg0 = ToLua.ToParamsObject(L, 2, count - 1);
			obj.Start(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)ToLua.CheckObject<MyFramework.ModelContorlBase>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMyComps(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)ToLua.CheckObject<MyFramework.ModelContorlBase>(L, 1);
			System.Collections.Generic.List<MyFramework.ModelCompBase> o = obj.GetMyComps();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartCoroutine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)ToLua.CheckObject<MyFramework.ModelContorlBase>(L, 1);
			System.Collections.IEnumerator arg0 = ToLua.CheckIter(L, 2);
			MyFramework.CoroutineTask o = obj.StartCoroutine(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int VP(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)ToLua.CheckObject<MyFramework.ModelContorlBase>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
			uint o = obj.VP(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateObj(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)ToLua.CheckObject<MyFramework.ModelContorlBase>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.GameObject arg2 = (UnityEngine.GameObject)ToLua.CheckObject(L, 4, typeof(UnityEngine.GameObject));
			UnityEngine.GameObject o = obj.CreateObj(arg0, arg1, arg2);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)ToLua.CheckObject<MyFramework.ModelContorlBase>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.LoadBundle(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowInspector(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)ToLua.CheckObject<MyFramework.ModelContorlBase>(L, 1);
			obj.ShowInspector();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ModelName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)o;
			string ret = obj.ModelName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ModelName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_State(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)o;
			MyFramework.ModelBaseState ret = obj.State;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index State on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ModelName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ModelName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ModelName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_State(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MyFramework.ModelContorlBase obj = (MyFramework.ModelContorlBase)o;
			MyFramework.ModelBaseState arg0 = (MyFramework.ModelBaseState)ToLua.CheckObject(L, 2, typeof(MyFramework.ModelBaseState));
			obj.State = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index State on a nil value");
		}
	}
}

